{
  "name": "psst",
  "version": "1.0.1",
  "description": "A small Pub/Sub library that uses subscriptions rather than callbacks.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/flesch/psst.js.git"
  },
  "keywords": [
    "pubsub",
    "event",
    "publish",
    "subscribe",
    "on",
    "off",
    "observe"
  ],
  "author": {
    "name": "John Flesch",
    "email": "john@fles.ch"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/flesch/psst.js/issues"
  },
  "homepage": "https://github.com/flesch/psst.js",
  "readme": "\n# psst.js\n\nThis is yet another small **Pub/Sub** library, however unlike many other implementations, the **subscribe** method returns an object that describes the channel and callback.\n\n## Installing\n\n```\n$ npm install psst\n```\n\n```\nvar psst = require('psst');\n```\n\n**psst** can be used in the browser with [browserify](http://browserify.org/).\n\n## Using\n\n### Subscribe/On\n\n```\nvar subscription = psst.on('topic', function(msg){\n  console.log(msg);\n});\n```\n\n`subscription` is a unique object that contains the channel and callback.\n\n\n### Subscribe Once\n\n```\nvar subscription = psst.once('topic', function(msg){\n  console.log(msg);\n});\n```\n\nThis `subscription` is removed from the subscriber's list after the callback has been executed.\n\n### Unsubscribe/Off\n\n```\npsst.off(subscription);\n```\n\nThis method requires the subscription created in the `.on` method. Unlike other libraries, you'll remove the subscription from the subscriber list, instead of removing a callback from a topic.\n\n### Publish/Emit\n\n```\npsst.emit('topic', 'Hello World!');\n```\n\n## License\n\nReleased under the MIT License: [http://flesch.mit-license.org](http://flesch.mit-license.org)\n",
  "readmeFilename": "README.md",
  "_id": "psst@1.0.1",
  "_from": "psst@"
}
